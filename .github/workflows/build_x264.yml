name: Build x264

on:
  push:
    branches: [ master, actions ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: x86
            msystem: MINGW32
            mingwenv: i686
          - arch: x64
            msystem: CLANG64
            mingwenv: clang-x86_64
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: true
        install: >-
          base-devel
          mingw-w64-${{ matrix.mingwenv }}-toolchain
          git
          p7zip
          nasm
        pacboy: >-
          clang:p
          lld:p
          llvm:p
          make:p
          pkgconf:p
          jq:p
          
    - name: Check for existing release
      id: check_existing
      shell: msys2 {0}
      working-directory: x264
      run: |
        # x264の現在のSHAを取得
        git clone --depth 1 https://code.videolan.org/videolan/x264.git temp_x264
        cd temp_x264
        CURRENT_SHA=$(git rev-parse HEAD)
        REV=$(git rev-list HEAD | wc -l)
        cd ..
        rm -rf temp_x264
        
        echo "current_sha=${CURRENT_SHA}" >> $GITHUB_OUTPUT
        echo "x264_rev=${REV}" >> $GITHUB_OUTPUT
        echo "Current x264 SHA: ${CURRENT_SHA}"
        
        # 最新リリースからbuild_rev.txtをダウンロード
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/rigaya/AutoBuildForAviUtlPlugins/releases/latest" 2>/dev/null || echo "{}")
        BUILD_REV_URL=$(echo "$LATEST_RELEASE" | jq -r ".assets[]? | select(.name == \"build_rev.txt\") | .browser_download_url" 2>/dev/null || echo "")
        
        if [ "$BUILD_REV_URL" != "null" ] && [ "$BUILD_REV_URL" != "" ]; then
          echo "Downloading build_rev.txt from latest release..."
          curl -L -o build_rev.txt "${BUILD_REV_URL}"
          
          # x264のSHAを比較
          EXISTING_X264_SHA=$(grep "^x264:" build_rev.txt | cut -d' ' -f2 || echo "")
          
          if [ "$EXISTING_X264_SHA" = "$CURRENT_SHA" ]; then
            echo "x264 SHA matches existing release: $CURRENT_SHA"
            echo "should_build=false" >> $GITHUB_OUTPUT
            
            # 既存のファイルをダウンロード
            EXPECTED_NAME="x264_${REV}_${{ matrix.arch }}.zip"
            ASSET_URL=$(echo "$LATEST_RELEASE" | jq -r ".assets[]? | select(.name == \"$EXPECTED_NAME\") | .browser_download_url" 2>/dev/null || echo "")
            
            if [ "$ASSET_URL" != "null" ] && [ "$ASSET_URL" != "" ]; then
              mkdir -p build_x264/${{ matrix.arch }}/x264/
              curl -L -o "${EXPECTED_NAME}" "${ASSET_URL}"
              unzip "${EXPECTED_NAME}" -d build_x264/${{ matrix.arch }}/x264/
              echo "Downloaded and extracted existing build: ${EXPECTED_NAME}"
            else
              echo "Warning: build_rev.txt indicates same SHA but file not found, will build"
              echo "should_build=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "x264 SHA differs: existing=$EXISTING_X264_SHA, current=$CURRENT_SHA"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "No build_rev.txt found in latest release, will build"
          echo "should_build=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Extract test data
      if: steps.check_existing.outputs.should_build == 'true'
      shell: msys2 {0}
      working-directory: x264
      run: |
        curl -o test_8.7z -L https://github.com/rigaya/ffmpeg_dlls_for_hwenc/releases/download/20250825/test_8.7z
        7z x test_8.7z
        
    - name: Build x264
      if: steps.check_existing.outputs.should_build == 'true'
      shell: msys2 {0}
      working-directory: x264
      run: |
        chmod +x build_x264.sh
        export YUV_PATH="$(pwd)/test.yuv"
        ./build_x264.sh
        
    - name: Get x264 revision number and rename executable
      id: get_rev
      shell: msys2 {0}
      working-directory: x264
      run: |
        if [ "${{ steps.check_existing.outputs.should_build }}" = "true" ]; then
          # 新しくビルドした場合
          cd build_x264/${{ matrix.arch }}/x264
          REV=$(git rev-list HEAD | wc -l)
          echo "x264_rev=${REV}" >> $GITHUB_OUTPUT
          echo "X264 revision: ${REV}"
          
          if [ -f x264.exe ]; then
            mv x264.exe x264_${REV}_${{ matrix.arch }}.exe
            echo "Renamed to: x264_${REV}_${{ matrix.arch }}.exe"
          else
            echo "Error: x264.exe not found"
            exit 1
          fi
        else
          # 既存ファイルを使用する場合
          echo "x264_rev=${{ steps.check_existing.outputs.x264_rev }}" >> $GITHUB_OUTPUT
          echo "Using existing X264 revision: ${{ steps.check_existing.outputs.x264_rev }}"
        fi
        
    - name: Upload x264 artifact
      uses: actions/upload-artifact@v4
      with:
        name: x264_${{ steps.get_rev.outputs.x264_rev }}_${{ matrix.arch }}
        path: x264/build_x264/${{ matrix.arch }}/x264/x264_${{ steps.get_rev.outputs.x264_rev }}_${{ matrix.arch }}.exe
        retention-days: 30
        
    - name: Set workflow output and save SHA
      id: output
      shell: msys2 {0}
      run: |
        echo "has_update=${{ steps.check_existing.outputs.should_build }}" >> $GITHUB_OUTPUT
        echo "arch=${{ matrix.arch }}" >> $GITHUB_OUTPUT
        echo "current_sha=${{ steps.check_existing.outputs.current_sha }}" >> $GITHUB_OUTPUT
        
        # x64の場合のみSHA情報をファイルに保存
        if [ "${{ matrix.arch }}" = "x64" ]; then
          echo "${{ steps.check_existing.outputs.current_sha }}" > x264_sha.txt
        fi
        
    - name: Upload SHA info
      if: matrix.arch == 'x64'
      uses: actions/upload-artifact@v4
      with:
        name: x264_sha
        path: x264/x264_sha.txt
        retention-days: 1
